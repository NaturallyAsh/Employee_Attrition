---
title: "Why Are Employees Leaving?"
toc: true
format:
  html:
    embed-resources: true
  pdf:
    toc: true
    number-sections: false
  commonmark:
    prefer-html: true
knitr:
  opts_chunk:
    echo: FALSE
    warning: FALSE
    message: FALSE

---
## Introduction

Employee turnover, also known as attrition, occurs when workers leave the company and can cause serious challenges. High turnover affects company finances, culture, and overall success. Some key problems caused by employee turnover are:

- **Losing Important Knowledge:** When experienced workers leave, they take valuable skills and knowledge of company processes with them. This can slow down productivity and innovation.  
- **Higher Costs:** It’s expensive to find, hire, and train replacements. Advertising jobs, interviewing, and training can quickly add up.  
- **Low Team Morale:** When employees often leave, teams experience uncertainty and stress. Remaining workers might feel overloaded or unhappy, reducing productivity.  
- **Harder to Attract Good Talent:** Companies known for losing workers frequently often struggle to hire top talent. Potential hires might think the business is unstable or not a good place to work.  
- **Poor Company Reputation:** High turnover can damage a company’s reputation and image, causing customers, partners, and employees to doubt company's quality and leadership.


## Identifying and Addressing High Turnover

The goal of this project is to explore why people are leaving. By looking closely at the data, I hope to find patterns and reasons for employees leaving. I'll then build a tool to predict who may leave soon so I can take action early.



```{r}
#| label: setup
#| include: false

suppressPackageStartupMessages({
  library(tidyverse)
  library(tidymodels)
  library(ggplot2)
  library(kableExtra)
  library(scales)
  library(ggrepel)
  library(grid)
  library(gridExtra)
  library(gridtext)
  library(themis)
  library(yardstick)
})

# Load the data
data <- read.csv("data/attrition-dataset.csv")
# source("theme/my_theme.R")
source("theme/project_theme.R")

```


## Employee Turnover: The Big Picture  

First, let's look at employee turnover company-wide:

### Overall Attrition Rate

```{r}
# Total company attrition

total_attrition <- data |> 
  group_by(Attrition) |> 
  summarise(n = n()) |> 
  mutate(percentage = n / sum(n) * 100)


ggplot(total_attrition, aes(x = Attrition, y = percentage, fill = Attrition)) +
  geom_col(width = 0.7) +
  scale_y_continuous(labels = label_percent(scale = 1), breaks = c(0, 25, 50, 75, 100), limits = c(0, 105)) + # Set y-axis limit to 0-100 for percentage
  geom_text(aes(label = paste0(round(percentage), "%")), data = total_attrition |> filter(Attrition == "Yes"), vjust = -1, size = 4) +
  geom_text(aes(label = paste0(round(percentage), "%")), data = total_attrition |> filter(Attrition == "No"), vjust = -1, size = 4) +
  # paste0(percent, "%"), parse = TRUE
  ylab("Percentage of Employees") +
  xlab("Attrition") +
  ggtitle("Company-wide Employee Turnover Rate (%)") +
  project_theme() +
  scale_fill_manual(
    values = c(STEELBLUE, SALMON),
    labels = c("Yes" = "Left Company", "No" = "Stayed")
  )
```



About 16% of employees left the company, while 84% stayed.


### Turnover by Job Roles

```{r}

attrition_jobrole <- data |>
  group_by(JobRole, Attrition) |>
  summarise(count = n(), .groups = 'drop') |>
  group_by(JobRole) |>
  mutate(
    role_total = sum(count),
    percentage = round(count / role_total * 100, 1)
  ) |>
  ungroup()

# Create a separate dataframe for attrition rates by role
attrition_rates <- attrition_jobrole |>
  filter(Attrition == "Yes") |>
  select(JobRole, count, role_total, percentage) |>
  arrange(desc(percentage)) |>
  mutate(
    rank = row_number(), # Add rank for sorting
    rate_label = paste0(percentage, "%"),
    count_label = paste0(count, " of ", role_total)
  )

# Separate data for 'Yes' and 'No' attrition for the pyramid plot
attrition_yes <- attrition_jobrole |>
  filter(Attrition == 'Yes') |>
  mutate(
    count_neg = -count,  # Make 'Yes' counts negative for pyramid effect
    label = paste0(percentage, "%")
  )

attrition_no <- attrition_jobrole |>
  filter(Attrition == 'No') |>
  mutate(
    label = paste0(percentage, "%")
    )

attrition_yes <- attrition_yes |>
  left_join(attrition_rates |> select(JobRole, rank), by = "JobRole")

attrition_no <- attrition_no |>
  left_join(attrition_rates |> select(JobRole, rank), by = "JobRole")



ggplot() + 
  geom_bar(data = attrition_yes, aes(x = reorder(JobRole, -rank), y = count_neg), stat = "identity", width = 0.7, fill = SALMON) + 
  geom_bar(data = attrition_no, aes(x = reorder(JobRole, -rank), y = count), stat = "identity", width = 0.7, fill = STEELBLUE) + 
  geom_text(data = attrition_no, aes(x = reorder(JobRole, -rank), y = count + 10, label = label), hjust = 0, size = 3.5, color = STEELBLUE, fontface = "bold") + 
  geom_text(data = attrition_yes, aes(x = reorder(JobRole, -rank), y = count_neg - 10, label = label), hjust = 1, size = 3.5, color = SALMON, fontface = "bold") + 
  geom_text(data = attrition_no, aes(x = reorder(JobRole, -rank), y = count / 2, label = count), size = 3, color = WHITE) + 
  geom_text(data = attrition_yes, aes(x = reorder(JobRole, -rank), y = count_neg / 2, label = abs(count_neg)), size = 3, color = WHITE) + 
  geom_hline(yintercept = 0, color = GRAY50, size = 0.5) + 
  scale_y_continuous(labels = function(x) paste0(abs(x)), breaks = seq(-300, 300, 100)) + 
  coord_flip() + 
  labs(title = "Job Roles with Highest Turnover Risk", subtitle = "Percentage of employees who left vs. stayed by job role", x = NULL, y = "Number of Employees", caption = "Red bars indicate roles with highest turnover rates") + 
  project_theme() + 
  theme(plot.caption.position = "panel") + 
  expand_limits(y = c(-100, 300))
```



Certain jobs have more turnover than others. Laboratory Technicians saw the highest total number of people leaving. Sales Representatives had the highest percent turnover rate (66%). Research Directors had the lowest turnover rate.


### Turnover by Department

```{r}
# Attrition by Department 

attrition_dept <- data |> 
  filter(Attrition == "Yes") |> 
  group_by(Department) |> 
  summarise(count = n()) |> 
  mutate(percentage = count / sum(count) * 100)

department_colors <- c(
  "Research & Development" = STEELBLUE,
  "Sales" = SALMON,
  "Human Resources" = METALGEAR
)

ggplot(attrition_dept, aes(x = 2, y = percentage, fill = Department)) + 
  geom_bar(stat = "identity", color = WHITE, linewidth = 0.2) + 
  coord_polar(theta = "y", start = 0) + 
  scale_fill_manual(values = department_colors) + 
  geom_label_repel(aes(label = paste0(sprintf("%.1f", percentage), "%")), position = position_stack(vjust = 0.5), color = "black", size = 4, segment.size = 0.3, segment.color = "black", show.legend = FALSE, box.padding = 0.5, label.padding = unit(0.3, "lines"), label.r = unit(0.15, "lines")) + 
  xlim(0.5, 2.5) + 
  ggtitle("Employee Turnover by Department") + 
  labs(caption = paste0("• Research & Development: ", "13.8% (accounts for 56.1% of all departures)\n", "• Sales: ", "20.6% - highest turnover rate (accounts for 38.8% of all departures)\n", "• Human Resources: ", "19% (accounts for 5.1% of all departures)")) + 
  # project_theme() + 
  theme_void() + 
  theme(
    plot.title = element_text(hjust = 0, size = 14, face = "bold", color = BLACK), 
    legend.position = "right", 
    legend.title = element_blank(), 
    legend.text = element_text(color = BLACK, margin = margin(r = 10, l = 5)), 
    plot.background = element_rect(fill = LIGHTBEIGE, color = NA), 
    legend.key = element_rect(fill = NA, color = NA), 
    plot.caption = element_text(hjust = 0, size = 10, lineheight = 1.2, margin = margin(t = 5, l = 10, b = 10), face = "plain", color = "#333333"),
    plot.margin = margin(0.5, 0.2, 0.2, 0.5, "cm")
    ) + 
  guides(fill = guide_legend(override.aes = list(shape = 22, size = 8, color = GRAY50, label = "")))


```



The Research & Development department accounted for more than half (56%) of all employee turnover. The smallest amount of turnover came from Human Resources (less than 5%).




## Important Factors that Influence Turnover

### Income and Employee Attrition 

```{r}

# Calculate summary stats for annotation
income_summary <- data |>
  group_by(Attrition) |>
  summarise(
    mean_income = mean(MonthlyIncome, na.rm = TRUE),
    median_income = median(MonthlyIncome, na.rm = TRUE),
    count = n(),
    .groups = 'drop'
  ) |>
  mutate(
    income_diff = mean_income[Attrition == "No"] - mean_income[Attrition == "Yes"],
    percent_diff = (income_diff / mean_income[Attrition == "Yes"]) * 100
  )

# Create annotation using grobTree
income_grob <- grobTree(richtext_grob(
  paste0(
    "Employees who stay earn <span style='color:#1F77B4;font-weight:bold;'>$", 
    format(round(income_summary$mean_income[income_summary$Attrition == "No"]), big.mark = ","), 
    "</span> on average<br>",
    "Employees who leave earn <span style='color:#D62728;font-weight:bold;'>$", 
    format(round(income_summary$mean_income[income_summary$Attrition == "Yes"]), big.mark = ","), 
    "</span> on average<br><br>",
    "<span style='font-weight:bold;'>That's a ", 
    round(income_summary$percent_diff[1]), 
    "% difference</span>"
  ),
  # gp = gpar(fontsize = 12, fontfamily = "sans"),
  gp = gpar(fontsize = 10),
  x = unit(0.05, "npc"), y = unit(0.9, "npc"),
  hjust = 0, vjust = 1,
  box_gp = gpar(col = GRAY50, fill = WHITE, alpha = 0.5, lwd = 1),
  padding = unit(c(10, 10, 10, 10), "pt"),
  r = unit(4, "pt")
))

ggplot(data, aes(x = Attrition, y = MonthlyIncome, fill = Attrition)) + 
  geom_violin(alpha = 0.7, width = 0.8) + 
  geom_boxplot(width = 0.2, color = WHITE, alpha = 0.9) + 
  stat_summary(fun = mean, geom = "point", shape = 23, size = 5, color = WHITE, fill = BLACK) + 
  annotation_custom(income_grob) + 
  annotate("segment", x = 1.1, xend = 1.9, y = income_summary$mean_income[income_summary$Attrition == "Yes"] + 1000, yend = income_summary$mean_income[income_summary$Attrition == "No"] - 1000, arrow = arrow(length = unit(0.3, "cm"), ends = "both"), color = BLACK, size = 0.6) + 
  annotate("text", x = 1.5, y = (income_summary$mean_income[income_summary$Attrition == "Yes"] + income_summary$mean_income[income_summary$Attrition == "No"]) / 2 + 1500, label = paste0("$", format(round(income_summary$income_diff), big.mark = ","), "/month difference"), color = BLACK, fontface = "bold", size = 3.4) + 
  scale_fill_manual(values = c("Yes" = SALMON, "No" = STEELBLUE), labels = c("Yes" = "Left Company", "No" = "Stayed")) + 
  scale_y_continuous(labels = dollar_format(), breaks = seq(0, 20000, 5000), expand = expansion(mult = c(0, 0.2))) + 
  labs(title = "Employees Who Leave Earn Substantially Less", subtitle = "Monthly income distribution by attrition status", x = NULL, y = "Monthly Income", caption = "Black diamonds indicate mean values") + 
  project_theme() 
```

Employees who left were generally earning lower monthly incomes compared to those who stayed. This clearly tells us pay is important when employees decide whether to stay or leave.


### Employee Age and Time at Company


```{r}

# Calculate attrition rates by age and tenure groups
attrition_tenure <- data |>
  mutate(
    AgeGroup = cut(Age, 
                  breaks = c(18, 30, 40, 50, 60), 
                  labels = c("18-30", "31-40", "41-50", "51-60"),
                  include.lowest = TRUE),
    TenureGroup = cut(YearsAtCompany,
                     breaks = c(0, 2, 5, 10, 20, 40),
                     labels = c("0-2", "3-5", "6-10", "11-20", "21+"),
                     include.lowest = TRUE)
  ) |>
  group_by(AgeGroup, TenureGroup) |>
  summarise(
    TotalCount = n(),
    AttritionCount = sum(Attrition == "Yes"),
    AttritionRate = AttritionCount / TotalCount * 100,
    .groups = 'drop'
  )

highest_attrition <- attrition_tenure |>
  filter(!is.na(AgeGroup) & !is.na(TenureGroup)) |>
  arrange(desc(AttritionRate)) |>
  slice(1)

lowest_attrition <- attrition_tenure |>
  filter(!is.na(AgeGroup) & !is.na(TenureGroup) & TotalCount >= 10) |>
  arrange(AttritionRate) |>
  slice(1)

# Create annotation using grobTree
attrition_grob <- grobTree(richtext_grob(
  paste0(
    "<span style='color:#D62728;font-weight:bold;'>Highest Risk:</span> ", 
    highest_attrition$AgeGroup, " age group with ", 
    highest_attrition$TenureGroup, " years<br>tenure ",
    "<span style='font-weight:bold;'>", round(highest_attrition$AttritionRate), 
    "% turnover rate</span><br><br>",
    "<span style='color:#1F77B4;font-weight:bold;'>Lowest Risk:</span> ", 
    lowest_attrition$AgeGroup, " age group with ", 
    lowest_attrition$TenureGroup, " years<br>tenure ",
    "<span style='font-weight:bold;'>", round(lowest_attrition$AttritionRate), 
    "% turnover rate</span>"
  ),
  gp = gpar(fontsize = 9),
  x = unit(0.05, "npc"), y = unit(0.95, "npc"),
  hjust = 0, vjust = 1,
  box_gp = gpar(col = GRAY50, fill = WHITE, alpha = 0.4, lwd = 1),
  padding = unit(c(10, 10, 10, 10), "pt"),
  r = unit(4, "pt")
))

ggplot(data, aes(x = Age, y = YearsAtCompany)) + 
  geom_point(aes(color = Attrition, size = Attrition), alpha = 0.7, position = position_jitter(width = 0.5, height = 0.5, seed = 123)) + 
  stat_density_2d(data = data |> filter(Attrition == "Yes"), aes(x = Age, y = YearsAtCompany), color = RED, alpha = 0.7, linewidth = 0.7, contour = TRUE) + 
  annotation_custom(attrition_grob) + 
  annotate("rect", xmin = 25, xmax = 35, ymin = 0, ymax = 5, fill = WHITE, alpha = 0.4, color = RED, linewidth = 1.5, linetype = "dashed") + 
  annotate("label", x = 30, y = 6, label = "HIGH TURNOVER RISK ZONE", color = WHITE, fill = RED, fontface = "bold", size = 3.5, label.padding = unit(0.5, "lines"), label.r = unit(0.2, "lines")) + 
  viridis::scale_fill_viridis(option = "plasma", name = "Employee\nDensity") + 
  scale_color_manual(values = c("Yes" = RED, "No" = STEELBLUE), labels = c("Yes" = "Left Company", "No" = "Stayed"), name = "Attrition") + 
  scale_size_manual(values = c("Yes" = 3, "No" = 1.5), guide = "none") + 
  scale_x_continuous(breaks = seq(20, 60, by = 5), limits = c(18, 60)) + 
  scale_y_continuous(breaks = seq(0, 40, by = 5), limits = c(0, 40)) + 
  labs(title = "Younger Employees with Short Tenure Have Highest Turnover Risk", subtitle = "Relationship between age, years at company, and attrition", x = "Age", y = "Years at Company", caption = "Red contour lines show areas of high turnover density") + 
  project_theme() + 
  theme(plot.title = element_text(hjust = 0.2))
```

Younger employees with fewer years at the company are more likely to leave, while older, long-term employees usually stay. I can see these patterns clearly from the concentration of people marked in red in the lower-left corner of the plot above.



### Work-Life Balance Factors 

I took a deeper look at several important factors related to employees' work-life experiences:


```{r}
wlb_vars <- data |> 
  mutate(Attrition_binary = if_else(Attrition == "Yes", 1, 0)) |> 
  select(c(BusinessTravel, DistanceFromHome, OverTime, WorkLifeBalance, Gender, Age, Department, Attrition, Attrition_binary))
```


#### Business Travel Frequency


```{r}
# Business Travel by Attrition
busi <- wlb_vars |>
  group_by(BusinessTravel, Attrition) |>
  summarise(count = n(), .groups = 'drop') |>
  group_by(BusinessTravel) |>
  mutate(
    group_total = sum(count),
    percentage = round(count / group_total * 100, 1)
  ) |>
  ungroup() |>
  mutate(
    highlight = Attrition == "Yes",
    TravelCategory = case_when(
      BusinessTravel == "Non-Travel" ~ "No Travel",
      BusinessTravel == "Travel_Rarely" ~ "Rare Travel",
      BusinessTravel == "Travel_Frequently" ~ "Frequent Travel",
      TRUE ~ as.character(BusinessTravel)
    ),
    TravelOrder = factor(TravelCategory, 
                         levels = c("No Travel", "Rare Travel", "Frequent Travel"))
  )

busi_grob <- grobTree(richtext_grob(
  "Employees who travel frequently<br>are more than twice as likely<br>to leave",
  gp = gpar(fontsize = 10), hjust = 0, align_widths = TRUE, box_gp = gpar(col = GRAY, fill = WHITE, lwd = 2), padding = unit(c(4, 4, 2, 4), "pt")
  ))



ggplot(busi, aes(x = TravelOrder, y = percentage, fill = Attrition)) + 
  geom_col(position = position_dodge(width = 0.7), width = 0.6) + 
  geom_text(aes(label = paste0(percentage, "%"), y = percentage + 5, color = Attrition), position = position_dodge(width = 0.7), size = 3.5, fontface = "bold") + 
  annotation_custom(busi_grob, xmin = 0.2, ymin = -10) + 
  annotate("segment", x = 0.9, xend = 2.75, y = 18, yend = 35, colour = SALMON, linetype = "dashed") + 
  scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, 20), labels = function(x) paste0(x, "%"), expand = expansion(mult = c(0, 0.1))) + 
  scale_fill_manual(values = c("Yes" = SALMON, "No" = STEELBLUE), labels = c("Yes" = "Left Company", "No" = "Stayed")) + 
  scale_color_manual(values = c("Yes" = SALMON, "No" = STEELBLUE)) + 
  labs(title = "Business Travel Significantly Increases Turnover Risk", subtitle = "Percentage of employees who stay vs. leave by travel frequency", x = NULL, y = "Percentage of Employees") + 
  project_theme() + 
  guides(color = "none")

```


Employees who travel frequently for business purposes are clearly more likely to leave the company. Frequent travel likely causes higher stress and lower job satisfaction.



#### Commute Distance (How far employees live from work)


```{r}
distance_data <- wlb_vars

distance_summary <- distance_data |>
  group_by(Attrition) |>
  summarise(
    mean_distance = mean(DistanceFromHome, na.rm = TRUE),
    median_distance = median(DistanceFromHome, na.rm = TRUE),
    .groups = 'drop'
  )


mean_yes <- sprintf("%.1f", distance_summary$mean_distance[distance_summary$Attrition == "Yes"])
mean_no <- sprintf("%.1f", distance_summary$mean_distance[distance_summary$Attrition == "No"])

distance_grob <- grobTree(richtext_grob(
  paste0("<span style='font-size:9pt;font-weight:bold'>Mean distance: <span style='color:#D62728;font-weight:bold;'>",
         mean_yes, 
         "</span> vs. <span style='color:#1F77B4;font-weight:bold;'>",
         mean_no,
         "</span> miles</span>"),
  gp = gpar(fontsize = 11), 
  hjust = 0, 
  align_widths = TRUE, 
  box_gp = gpar(col = "#CCCCCC", fill = "#FFFFFF", lwd = 1),
  padding = unit(c(8, 8, 6, 8), "pt"),
  r = unit(4, "pt")
))

ggplot(distance_data, aes(x = DistanceFromHome, fill = Attrition)) + 
  geom_histogram(aes(y = ..density..), alpha = 0.3, position = "identity", bins = 30) + 
  geom_density(alpha = 0.7) + 
  geom_vline(data = distance_summary, aes(xintercept = mean_distance, color = Attrition), linetype = "dashed", size = 1) + 
  annotation_custom(distance_grob, xmin = -10, ymin = 0.05) + 
  annotate("rect", xmin = 15, xmax = max(distance_data$DistanceFromHome, na.rm = TRUE), ymin = 0, ymax = 0.04, alpha = 0.3, fill = SALMON) + 
  scale_x_continuous(breaks = seq(0, max(distance_data$DistanceFromHome, na.rm = TRUE), by = 5), expand = expansion(mult = c(0, 0.15))) + 
  scale_y_continuous(labels = scales::percent_format(accuracy = 1), expand = expansion(mult = c(0, 0.2))) + 
  scale_fill_manual(values = c("Yes" = SALMON, "No" = STEELBLUE), labels = c("Yes" = "Left Company", "No" = "Stayed")) + 
  scale_color_manual(values = c("Yes" = SALMON, "No" = STEELBLUE)) + 
  labs(title = "Commute Distance Impacts Employee Retention", subtitle = "Employees who leave tend to have longer commutes", x = "Distance From Home (miles)", y = "Density") + 
  project_theme() + 
  theme(
    legend.frame = element_rect(color = WHITE), 
    legend.background = element_rect(color = WHITE)) + 
  guides(color = "none")
```



Employees who left were often living farther from the office. Although I can't be sure commute distance alone causes turnover, it likely adds stress and impacts work-life balance, making employees more willing to leave.



#### Working Overtime 


```{r}
overtime_data <- wlb_vars |>
  group_by(OverTime, Attrition) |>
  summarise(count = n(), .groups = 'drop') |>
  group_by(OverTime) |>
  mutate(
    group_total = sum(count),
    percentage = round(count / group_total * 100, 1)
  ) |>
  ungroup() |>
  mutate(
    total_label = paste0("n=", group_total)
  )

# Calculate the difference in attrition percentages
yes_no <- overtime_data |>
  select(OverTime, Attrition, percentage) |>
  pivot_wider(names_from = Attrition, values_from = percentage) |>
  mutate(difference = Yes - No)


overtime_grob <- grobTree(richtext_grob(
  paste0("Employees who work overtime <br>are <span style='color:#D62728;font-weight:bold;'>",
         round(yes_no$Yes[yes_no$OverTime == "Yes"] / yes_no$Yes[yes_no$OverTime == "No"], 1),
         "x</span> more likely to leave"),
  gp = gpar(fontsize = 11), 
  hjust = 0, 
  align_widths = TRUE, 
  box_gp = gpar(col = "#CCCCCC", fill = "#FFFFFF", lwd = 1),
  padding = unit(c(8, 8, 6, 8), "pt"),
  r = unit(4, "pt")
))

ggplot(overtime_data, aes(x = OverTime, y = percentage, fill = Attrition)) + 
  geom_col(position = position_dodge(width = 0.7), width = 0.6) + 
  geom_text(aes(label = paste0(percentage, "%"), y = percentage + 3, color = Attrition), position = position_dodge(width = 0.7), size = 3.5, fontface = "bold") + 
  annotation_custom(overtime_grob, xmin = 0.2, ymin = 70) + 
  annotate("segment", x = 1.5, xend = 1.7, y = 78, yend = 40, arrow = arrow(length = unit(0.3, "cm")), color = SALMON, size = 0.8) + 
  scale_y_continuous(limits = c(-5, 100), breaks = seq(0, 100, 20), labels = function(x) ifelse(x < 0, "", paste0(x, "%")), expand = expansion(mult = c(0, 0.1))) + 
  scale_fill_manual(values = c("Yes" = SALMON, "No" = STEELBLUE), labels = c("Yes" = "Left Company", "No" = "Stayed")) + 
  scale_color_manual(values = c("Yes" = SALMON, "No" = STEELBLUE)) + 
  labs(title = "Overtime Significantly Increases Turnover Risk", subtitle = "Percentage of employees who stay vs. leave by overtime status", y = "Percentage of Employees") + 
  project_theme() + 
  guides(color = "none")
```


Working overtime clearly makes employees much more likely to leave. Regular overtime hours cause employees to burn out, feel stressed, and become unhappy at work.



#### Employee-rated Work-Life Balance Survey 


```{r}
wlb_data <- wlb_vars |>
  mutate(
    WorkLifeBalance = factor(WorkLifeBalance, 
                            levels = 1:4, 
                            labels = c("Poor", "Fair", "Good", "Excellent"))
  ) |>
  group_by(WorkLifeBalance, Attrition) |>
  summarise(count = n(), .groups = 'drop') |>
  group_by(WorkLifeBalance) |>
  mutate(
    group_total = sum(count),
    percentage = round(count / group_total * 100, 1)
  ) |>
  ungroup() |>
  mutate(
    total_label = paste0("n=", group_total)
  )

attrition_trend <- wlb_data |>
  filter(Attrition == "Yes") |>
  select(WorkLifeBalance, percentage, Attrition)



wlb_grob <- grobTree(richtext_grob(
  paste0("Employees reporting poor balance<br> are <span style='color:#D62728;font-weight:bold;'>",
         round(attrition_trend$percentage[attrition_trend$WorkLifeBalance == "Poor"] / 
              mean(attrition_trend$percentage[attrition_trend$WorkLifeBalance %in% c("Good", "Excellent")]), 1),
         "x</span> more likely to leave than<br> those with good/excellent balance"),
  gp = gpar(fontsize = 10), 
  hjust = 0, 
  align_widths = TRUE, 
  box_gp = gpar(col = "#CCCCCC", fill = "#FFFFFF", lwd = 1),
  padding = unit(c(8, 8, 6, 8), "pt"),
  r = unit(4, "pt")
))

ggplot(wlb_data, aes(x = WorkLifeBalance, y = percentage, fill = Attrition)) + 
  geom_col(position = position_dodge(width = 0.7), width = 0.6) + 
  geom_text(aes(label = paste0(percentage, "%"), y = percentage + 3, color = Attrition), position = position_dodge(width = 0.7), size = 3.5, fontface = "bold") + 
  geom_line(data = attrition_trend, aes(x = as.numeric(WorkLifeBalance), y = percentage + 9, group = 1), color = SALMON, linetype = "dashed", size = 0.8) + # trend line
  annotation_custom(wlb_grob, xmin = -0.4, ymin = 15) + 
  annotate("segment", x = 2, xend = 1.25, y = 60, yend = attrition_trend$percentage[attrition_trend$WorkLifeBalance == "Poor"] + 7, arrow = arrow(length = unit(0.3, "cm")), color = SALMON, size = 0.8) + 
  scale_y_continuous(limits = c(-5, 100), breaks = seq(0, 100, 20), labels = function(x) ifelse(x < 0, "", paste0(x, "%")), expand = expansion(mult = c(0, 0.1))) + 
  scale_fill_manual(values = c("Yes" = SALMON, "No" = STEELBLUE), labels = c("Yes" = "Left Company", "No" = "Stayed")) + 
  scale_color_manual(values = c("Yes" = SALMON, "No" = STEELBLUE)) + 
  labs(title = "Poor Work-Life Balance Increases Turnover Risk", subtitle = "Employees with poor work-life balance are much more likely to leave", x = "Work-Life Balance Rating", y = "Percentage of Employees") + 
  project_theme() + 
  guides(color = "none")
```

Employees who rated their own work-life balance lowest (rating "1") were much more likely to leave the company. Better work-life balance ratings (2 and above) were linked to lower attrition.


## Predicting Employee Turnover: Creating a Prediction Tool 

### Building the Prediction Model  

After exploring turnover patterns, I built a prediction model called a "Random Forest." This model looks at different factors to predict who is more likely to leave. I checked how well it performed using common performance measures.



```{r}

model_data <- data |>
  # mutate(Attrition = factor(Attrition, levels = c("Yes", "No")))
  mutate(across(where(is.character), factor)) |> 
  mutate(Attrition = factor(Attrition, levels = c("Yes", "No")))

# Split data (70% training, 30% testing)
set.seed(123)
data_split <- initial_split(data = model_data, prop = 0.7, strata = Attrition)
train_data <- training(data_split)
test_data <- testing(data_split)

# Define data preprocessing recipe
data_recipe <- recipe(Attrition ~ ., data = train_data) |>
  update_role(EmployeeNumber, EmployeeCount, Over18, StandardHours, new_role = "ID") |> 
  step_rm(has_role("ID")) |> 
  step_dummy(all_nominal_predictors()) |> 
  step_normalize(all_numeric_predictors()) |> 
  step_zv(all_predictors())

rf_model <- rand_forest(mode = "classification", trees = 500) |>
  set_engine("ranger", importance = "impurity")

# Create workflow
rf_workflow <- workflow() |>
  add_recipe(data_recipe) |>
  add_model(rf_model)

# Train the model
rf_fit <- rf_workflow |> fit(data = train_data)

# Evaluate model on test data
predictions <- predict(rf_fit, test_data, type = "prob") |>
  bind_cols(predict(rf_fit, test_data)) |>
  bind_cols(test_data |> select(Attrition))

# Calculate sensitivity (recall) and specificity
sens <- sensitivity(predictions, truth = Attrition, estimate = .pred_class)
spec <- specificity(predictions, truth = Attrition, estimate = .pred_class)
# Calculate J-index
j_index <- sens$.estimate + spec$.estimate - 1

accuracy <- predictions |> metrics(truth = Attrition, estimate = .pred_class) |>
  filter(.metric == "accuracy") |> pull(.estimate)

precision <- predictions |> 
  precision(truth = Attrition, estimate = .pred_class) |>
  pull(.estimate)

recall <- predictions |> 
  recall(truth = Attrition, estimate = .pred_class) |>
  pull(.estimate)

f1 <- predictions |> 
  f_meas(truth = Attrition, estimate = .pred_class) |>
  pull(.estimate)

roc_auc_val <- predictions |>
  roc_auc(truth = Attrition, .pred_Yes) |>
  pull(.estimate)

conf_matrix <- predictions |>
  conf_mat(truth = Attrition, estimate = .pred_class)

# accuracy
# precision
# recall
# f1
# roc_auc_val
# j_index
```



### Prediction Model Performance  

```{r}

# Create a metrics table
metrics_table <- tibble(
  Metric = c("Accuracy", "Precision", "ROC AUC"),
  Value = c(accuracy, precision, roc_auc_val),
  Description = c(
    "Proportion of correct predictions",
    "Proportion of predicted attrition cases that were actual attrition",
    "Area under the ROC curve (model's ability to distinguish classes)"
  )
) |>
  mutate(
    Value = round(Value, 3),
    Performance = case_when(
      Value >= 0.9 ~ "Excellent",
      Value >= 0.8 ~ "Good",
      Value >= 0.7 ~ "Fair",
      Value >= 0.6 ~ "Poor",
      TRUE ~ "Very Poor"
    )
  ) |> 
  kbl(
    caption = "Random Forest Model Performance Metrics",
    col.names = c("Metric", "Value", "Description", "Performance Rating"),
    align = c("l", "c", "l", "c")
  ) |> 
  kable_classic() |> 
  column_spec(1, bold = TRUE)

metrics_table
```


The model was correctly able to predict if an employee would stay or go about 85% of the time.
Additionally, when the prediction model identifies an employee likely to leave, it was correct around 80% of the time. This tool helps identify at-risk employees and allows managers to proactively address the reasons employees might leave.


### Key Factors Predicting Employee Turnover  

```{r}
# Extract feature importance
importance_data <- rf_fit |>
  extract_fit_parsnip() |>
  vip::vi() |>
  mutate(
    Variable = gsub("_", " ", Variable),
    Variable = gsub("BusinessTravel", "Business Travel: ", Variable),
    Variable = gsub("JobRole", "Job Role: ", Variable),
    Variable = gsub("MaritalStatus", "Marital Status: ", Variable),
    Category = case_when( # Create categories
      grepl("Over[tT]ime", Variable) ~ "Work-Life Balance",
      grepl("Travel|Distance", Variable) ~ "Work-Life Balance",
      grepl("WorkLife|Environment", Variable) ~ "Work-Life Balance",
      grepl("Job|Role|Level", Variable) ~ "Job Characteristics",
      grepl("Income|Stock|Rate", Variable) ~ "Compensation",
      grepl("Age|Years", Variable) ~ "Demographics & Tenure",
      grepl("Education|Training", Variable) ~ "Development",
      grepl("Satisfaction|Involvement", Variable) ~ "Engagement",
      grepl("Gender|Marital", Variable) ~ "Demographics & Tenure",
      TRUE ~ "Other"
    )
  ) |>
  # Top 10 features
  slice_max(order_by = Importance, n = 10)

importance_plot <- ggplot(importance_data, 
                         aes(x = fct_reorder(Variable, Importance), 
                             y = Importance,
                             fill = Category)) +
  geom_col() +
  geom_text(
    aes(label = round(Importance, 3), 
        hjust = -0.1),
    size = 3.5
  ) +
  coord_flip() +
  expand_limits(y=20) +
  # scale_fill_brewer(palette = "Set2")  +
  project_theme() +
  theme(
    axis.title.y = element_blank()
  ) +
  scale_fill_manual(
    values = c("Compensation" = TEAL, "Demographics & Tenure" = SALMON, "Work-Life Balance" = STEELBLUE),
  )

importance_plot
```


**Pay and Salary:**  
- Monthly Income is the most important factor, meaning fair salaries matter a great deal to employees.  
- Other salary measures (daily, monthly, hourly pay) also predict turnovers, further showing that pay is critical.

**Employee Age and Time at the Company:**  
- Younger employees and employees newer to the company are most likely to leave.  
- Employees spending more years with the company or the same manager are more likely to stay longer, showing relationships at work matter.

**Work-life Balance:**  
- Overtime hours strongly influence workers leaving because excessive overtime often leads to stress and dissatisfaction.  
- Long commutes negatively influence employees to leave by weakening their work-life balance.



## Recommendations to Reduce Employee Turnover

Based on this analysis, here's a clear set of actions the company should take to keep talented workers:

1. **Improve Pay:** Ensure competitive pay and clear salary growth paths. Reward younger and newer employees who might be more prone to turnover.
2. **Better Work-life Balance:** Lower overtime hours, offer remote or hybrid work arrangements, and reduce frequent business travels.
3. **Improve Management Relationships:** Offer management training and start mentorship programs pairing new hires with experienced employees.
4. **Use the Prediction Tool:** Regularly spot employees at high risk of turnover. Conduct short surveys frequently so that potential issues can quickly be solved.

## Limitations of the Prediction Model

My prediction model provides helpful insights, but it also has limits:

- **Correlation is not the same as cause-and-effect:** Just because the data shows related factors (like longer commutes or lower pay), we can't confirm these alone cause turnover.
- **People Factors:** The analysis doesn’t fully capture personal choices, career ambitions, or external reasons employees might leave for other jobs.
- **Quality of Data:** Reliable predictions require accurate and updated data. Missing or outdated information limits prediction accuracy.


## Conclusion

Using these insights and recommended strategies together can help the company support employees better and significantly reduce turnover.